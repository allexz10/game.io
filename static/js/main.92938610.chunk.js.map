{"version":3,"sources":["data/choices.ts","components/IntroModal/IntroModal.tsx","components/WinnerModal/WinnerModal.tsx","components/RulesModal/RulesModal.tsx","components/LevelModal/LevelModal.tsx","components/StatsModal/StatsModal.tsx","components/Game/Game.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["choices","name","imgSrc","id","IntroModal","closeModal","namesArray","useState","userName","setUserName","pcName","setPcName","checkbox","setCheckbox","isValid","className","width","height","src","alt","type","onChange","htmlFor","placeholder","e","target","value","disabled","onClick","WinnerModal","userChoice","pcChoice","result","userScore","pcScore","setPcScore","setUserScore","userHealth","pcHealth","RulesModal","hideGame","LevelModal","level","handleClick","map","it","StatsModal","stats","date","Game","setUserChoice","setPcChoice","setUserHealth","setPcHealth","setResult","visible","setVisible","loading","setLoading","isButtonActive","setIsButtonActive","introModal","setIntroModal","names","setNames","settings","setSettings","rulesModal","setRulesModal","levelModal","setLevelModal","statsModal","setStatsModal","setLevel","setHideGame","dateStamp","setDateStamp","saved","localStorage","getItem","JSON","parse","statistics","setStatistics","useEffect","setItem","stringify","today","Date","getDate","getMonth","getFullYear","time","getHours","getMinutes","getSeconds","dateTime","closeSettings","timeOut","setTimeout","userDemage","Math","floor","random","pcDamage","checkResults","clearTimeout","choice","length","generatePcChoice","style","display","onMouseLeave","window","location","reload","completed","bgColor","labelAlignment","baseBgColor","maxCompleted","filter","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.92938610.chunk.js","sourcesContent":["/* eslint-disable max-len */\nconst choices = [\n  {\n    name: 'Rock',\n    imgSrc: 'https://pbs.twimg.com/media/DL1BL4KXkAAanq3.jpg',\n    id: 1,\n  },\n  {\n    name: 'Paper',\n    imgSrc: 'https://s3.amazonaws.com/static.rogerebert.com/uploads/review/primary_image/reviews/the-paper-1994/EB19940318REVIEWS403180306AR.jpg',\n    id: 2,\n  },\n  {\n    name: 'Scissors',\n    imgSrc: 'https://i.insider.com/5fbfc9a2037cbd00186127de?width=1000&format=jpeg&auto=webp',\n    id: 3,\n  },\n  {\n    name: 'Lizard',\n    imgSrc: 'https://imgix.ranker.com/user_node_img/1227/24522201/original/rango-film-characters-photo-u1?auto=format&q=60&fit=crop&fm=pjpg&dpr=2&crop=faces&h=144&w=144',\n    id: 4,\n  },\n  {\n    name: 'Spock',\n    imgSrc: 'https://store.playstation.com/store/api/chihiro/00_09_000/container/US/en/19/UP2135-CUSA04242_00-AV00000000000050/image?w=320&h=320&bg_color=000000&opacity=100&_version=00_09_000',\n    id: 5,\n  },\n];\n\nexport default choices;\n","/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { useState, useRef, useEffect } from 'react';\nimport './IntroModal.scss';\n\ntype Props = {\n  closeModal: (arg: boolean) => void;\n  namesArray: (name: string[]) => void;\n};\n\nconst IntroModal: React.FC<Props> = ({ closeModal, namesArray }) => {\n  const [userName, setUserName] = useState('');\n  const [pcName, setPcName] = useState('');\n  const [checkbox, setCheckbox] = useState(false);\n\n  const isValid = userName && pcName && checkbox;\n\n  const handleClick = () => {\n    if (isValid) {\n      namesArray([userName, pcName]);\n      closeModal(false);\n    } else {\n      closeModal(true);\n    }\n  };\n\n  return (\n    <div className=\"intro__modal\">\n      <div className=\"content\">\n        <h1 className=\"heading\">Rules</h1>\n        <div className=\"image__wrapper\">\n          <img\n            className=\"image\"\n            width={300}\n            height={300}\n            src=\"./ruless.svg\"\n            alt=\"rules\"\n          />\n        </div>\n        <p className=\"rules\">\n          Scissors cuts Paper, Paper covers Rock, Rock crushes Lizard, Lizard\n          poisons Spock, Spock smashes Scissors, Scissors decapitates Lizard,\n          Lizard eats Paper, Paper disproves Spock, Spock vaporizes Rock, (and\n          as it always has) Rock crushes Scissors. Game up to 10 wins, good\n          luck...\n        </p>\n        <div className=\"checkbox__wrapper\">\n          <input\n            className=\"checkbox\"\n            type=\"checkbox\"\n            id=\"rules\"\n            onChange={() => setCheckbox(!checkbox)}\n          />\n          <label className=\"label label--rules\" htmlFor=\"rules\">\n            I have read the rules\n          </label>\n        </div>\n        <div className=\"username__wrapper\">\n          <label className=\"label label--username\" htmlFor=\"user\">\n            Player 1\n          </label>\n          <input\n            className=\"input input--username\"\n            type=\"text\"\n            id=\"user\"\n            placeholder=\"User name..\"\n            onChange={(e) => setUserName(e.target.value)}\n          />\n        </div>\n        <div className=\"pcname__wrapper\">\n          <label className=\"label label--pcname\" htmlFor=\"pc\">\n            Player 2\n          </label>\n          <input\n            className=\"input input--pcname\"\n            id=\"pc\"\n            type=\"text\"\n            placeholder=\"PC name..\"\n            onChange={(e) => setPcName(e.target.value)}\n          />\n        </div>\n\n        <button\n          className=\"button\"\n          disabled={!isValid}\n          onClick={() => handleClick()}\n        >\n          Let's play\n        </button>\n      </div>\n    </div>\n  );\n};\nexport default IntroModal;\n","/* eslint-disable react/no-unescaped-entities */\nimport React from 'react';\nimport './WinnerModal.scss';\n\ntype Props = {\n  userScore: number;\n  pcScore: number;\n  setUserScore: (userScore: number) => void;\n  setPcScore: (pcScore: number) => void;\n  userChoice: (userChoice: string) => void;\n  pcChoice: (pcChoice: string) => void;\n  userHealth: (userHealth: number) => void;\n  pcHealth: (pcHealth: number) => void;\n  result: (result: string) => void;\n\n  userName: string;\n};\n\nconst WinnerModal: React.FC<Props> = ({\n  userChoice,\n  pcChoice,\n  result,\n  userScore,\n  pcScore,\n  setPcScore,\n  setUserScore,\n  userName,\n  userHealth,\n  pcHealth,\n}) => {\n  const resetGame = () => {\n    userChoice('');\n    pcChoice('');\n    result('');\n    setUserScore(0);\n    setPcScore(0);\n    pcHealth(100);\n    userHealth(100);\n  };\n  return (\n    <div className=\"winner__modal\">\n      <div>\n        {userScore > pcScore ? (\n          <div>\n            <p className=\"text\">{`Congratulations ${userName}`}</p>\n            <div className=\"image__wrapper\">\n              <img className=\"image\" src=\"winner.gif\" alt=\"mem\" />\n            </div>\n            <p className=\"text\">YOU WON!!!</p>\n          </div>\n        ) : (\n          <div>\n            <p className=\"text\">GAME OVER</p>\n            <div className=\"image__wrapper\">\n              <img className=\"image\" src=\"cry.gif\" alt=\"mem\" />\n            </div>\n            <p className=\"text text--dontworry\">\n              don't worry it's just a game...\n            </p>\n          </div>\n        )}\n      </div>\n      <button className=\"button\" onClick={() => resetGame()}>\n        PLAY AGAIN\n      </button>\n    </div>\n  );\n};\nexport default WinnerModal;\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React from 'react';\nimport './RulesModal.scss';\n\ntype Props = {\n  closeModal: (arg: boolean) => void;\n  hideGame: (arg: boolean) => void;\n};\n\nconst RulesModal: React.FC<Props> = ({ closeModal, hideGame }) => {\n  const handleClick = () => {\n    closeModal(false);\n    hideGame(false);\n  };\n  return (\n    <div className=\"rules__modal\">\n      <div className=\"content\">\n        <h1 className=\"heading\">Rules</h1>\n        <div className=\"image__wrapper\">\n          <img\n            className=\"image\"\n            src=\"./ruless.svg\"\n            alt=\"rules\"\n          />\n        </div>\n        <p className=\"rules\">\n          Scissors cuts Paper, Paper covers Rock, Rock crushes Lizard, Lizard\n          poisons Spock, Spock smashes Scissors, Scissors decapitates Lizard,\n          Lizard eats Paper, Paper disproves Spock, Spock vaporizes Rock, (and\n          as it always has) Rock crushes Scissors. Game up to 10 wins or loss of\n          health, good luck...\n        </p>\n\n        <button className=\"button\" onClick={() => handleClick()}>\n          Close\n        </button>\n      </div>\n    </div>\n  );\n};\nexport default RulesModal;\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React from 'react';\nimport './LevelModal.scss';\n\ntype Props = {\n  closeModal: (arg: boolean) => void;\n  hideGame: (arg: boolean) => void;\n  level: (arg: string) => void;\n};\n\nconst LevelModal: React.FC<Props> = ({ closeModal, hideGame, level }) => {\n  const handleClick = () => {\n    closeModal(false);\n    hideGame(false);\n  };\n\n  return (\n    <div className=\"level__modal\">\n      <button className=\"button button--close\" onClick={() => handleClick()}>\n        X\n\n      </button>\n      <div className=\"content\">\n        <h1 className=\"heading\">game level</h1>\n        {['Easy', 'Medium', 'Hard'].map((it) => (\n          <button\n            className=\"button\"\n            onClick={() => {\n              handleClick();\n              level(it);\n            }}\n            key={it}\n          >\n            {it}\n          </button>\n        ))}\n\n      </div>\n    </div>\n  );\n};\n\nexport default LevelModal;\n","import React from 'react';\nimport './StatsModal.scss';\n\nexport type Statistics = {\n  name: string;\n  level: string;\n  date: string;\n};\n\ntype Props = {\n  closeModal: (arg: boolean) => void;\n  hideGame: (arg: boolean) => void;\n  stats: Statistics[];\n};\n\nconst StatsModal: React.FC<Props> = ({ closeModal, hideGame, stats }) => {\n  const handleClick = () => {\n    closeModal(false);\n    hideGame(false);\n  };\n\n  return (\n    <div className=\"stats__modal\">\n      <button className=\"button button--close\" onClick={() => handleClick()}>\n        x\n      </button>\n      <h1 className=\"heading\">Results</h1>\n      <div className=\"wrapper\">\n        <ol className=\"list\">\n          {stats.map(({ name, level, date }) => (\n            <li className=\"list__item\" key={date}>\n              {`Name: ${name} --- Level: ${level} --- Date: ${date}`}\n            </li>\n          ))}\n        </ol>\n      </div>\n    </div>\n  );\n};\n\nexport default StatsModal;\n","/* eslint-disable prefer-destructuring */\nimport { useEffect, useState, useRef } from 'react';\nimport ProgressBar from '@ramonak/react-progress-bar';\nimport choices from '../../data/choices';\nimport IntroModal from '../IntroModal/IntroModal';\nimport WinnerModal from '../WinnerModal/WinnerModal';\nimport './Game.scss';\nimport RulesModal from '../RulesModal/RulesModal';\nimport LevelModal from '../LevelModal/LevelModal';\nimport StatsModal from '../StatsModal/StatsModal';\n\nexport type Statistics = {\n  name: string;\n  level: string;\n  date: string;\n};\n\nconst Game = () => {\n  const [userChoice, setUserChoice] = useState('');\n  const [pcChoice, setPcChoice] = useState('');\n  const [userHealth, setUserHealth] = useState(100);\n  const [pcHealth, setPcHealth] = useState(100);\n  const [result, setResult] = useState('');\n  const [userScore, setUserScore] = useState(0);\n  const [pcScore, setPcScore] = useState(0);\n  const [visible, setVisible] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [isButtonActive, setIsButtonActive] = useState(true);\n  const [introModal, setIntroModal] = useState(true);\n  const [names, setNames] = useState<string[]>([]);\n  const [settings, setSettings] = useState(false);\n  const [rulesModal, setRulesModal] = useState(false);\n  const [levelModal, setLevelModal] = useState(false);\n  const [statsModal, setStatsModal] = useState(false);\n  const [level, setLevel] = useState('Medium');\n  const [hideGame, setHideGame] = useState(false);\n  const [dateStamp, setDateStamp] = useState('');\n\n  const [statistics, setStatistics] = useState<Statistics[]>(() => {\n    const saved = localStorage.getItem('statistics') || '';\n    if (saved) {\n      return JSON.parse(saved);\n    }\n    return [];\n  });\n\n  useEffect(() => {\n    localStorage.setItem('statistics', JSON.stringify(statistics));\n  }, [statistics]);\n\n  useEffect(() => {\n    const today = new Date();\n    const date = `${today.getDate()}/${\n      today.getMonth() + 1\n    }/${today.getFullYear()}`;\n\n    const time = `${today.getHours()}:`\n      + `${\n        today.getMinutes() >= 10 ? today.getMinutes() : `0${today.getMinutes()}`\n      }`\n      + ':'\n      + `${\n        today.getSeconds() >= 10 ? today.getSeconds() : `0${today.getSeconds()}`\n      }`;\n\n    const dateTime = `${date} - ${time}`;\n    setDateStamp(dateTime);\n\n    let name;\n    if (\n      userHealth <= 0\n      || pcHealth <= 0\n      || userScore === 10\n      || pcScore === 10\n    ) {\n      if (userScore > pcScore) {\n        name = names[0];\n      } else {\n        name = names[1];\n      }\n      setStatistics([...statistics, { name, level, date: dateStamp }]);\n    }\n  }, [userHealth, pcHealth]);\n\n  const generatePcChoice = () => {\n    const choice = choices.map(({ name }) => name)[\n      Math.floor(Math.random() * choices.length)\n    ];\n    const randomChoice = choice;\n    setPcChoice(randomChoice);\n  };\n\n  const resetGame = () => {\n    window.location.reload();\n  };\n\n  const closeSettings = () => {\n    setHideGame(true);\n    setSettings(!settings);\n  };\n\n  const checkResults = () => {\n    const userDemage = Math.floor(Math.random() * 10) + 6;\n    let pcDamage = 0;\n    if (level === 'Easy') {\n      pcDamage = Math.floor(Math.random() * 5) + 4;\n    } else if (level === 'Medium') {\n      pcDamage = Math.floor(Math.random() * 10) + 5;\n    } else {\n      pcDamage = Math.floor(Math.random() * 22) + 10;\n    }\n\n    switch (userChoice + pcChoice) {\n      case 'ScissorsPaper':\n      case 'RockScissors':\n      case 'PaperRock':\n      case 'LizardPaper':\n      case 'SpockScissors':\n      case 'RockLizard':\n      case 'PaperSpock':\n      case 'SpockRock':\n      case 'ScissorsLizard':\n      case 'LizardSpock':\n        setResult('YOU WIN!');\n        setUserScore(userScore + 1);\n        setPcHealth(pcHealth - userDemage);\n        break;\n      case 'PaperScissors':\n      case 'ScissorsRock':\n      case 'RockPaper':\n      case 'PaperLizard':\n      case 'ScissorsSpock':\n      case 'LizardRock':\n      case 'SpockPaper':\n      case 'RockSpock':\n      case 'LizardScissors':\n      case 'SpockLizard':\n        setResult('YOU LOSE!');\n        setPcScore(pcScore + 1);\n        setUserHealth(userHealth - pcDamage);\n        break;\n      case 'RockRock':\n      case 'PaperPaper':\n      case 'ScissorsScissors':\n      case 'LizardLizard':\n      case 'SpockSpock':\n        setResult('DRAW!');\n        break;\n      default:\n    }\n  };\n\n  useEffect(() => {\n    const timeOut = setTimeout(() => {\n      setVisible(true);\n      checkResults();\n      setIsButtonActive(true);\n    }, 1000);\n    return () => {\n      clearTimeout(timeOut);\n      setVisible(false);\n      setIsButtonActive(false);\n    };\n  }, [userChoice, pcChoice]);\n\n  useEffect(() => {\n    const timeOut = setTimeout(() => {\n      setLoading(true);\n    }, 3000);\n    return () => {\n      clearTimeout(timeOut);\n      setLoading(false);\n    };\n  }, [introModal]);\n\n  const handleClick = (value: string) => {\n    setUserChoice(value);\n    generatePcChoice();\n  };\n\n  return (\n    <div className=\"game\">\n      {introModal ? (\n        <IntroModal closeModal={setIntroModal} namesArray={setNames} />\n      ) : (\n        <div>\n          <div\n            className=\"loading\"\n            style={{ display: loading ? 'none' : 'block' }}\n          >\n            <img className=\"loading__image\" src=\"loading.gif\" alt=\"\" />\n            <h1 className=\"loading__title\">Loading...</h1>\n          </div>\n\n          {userHealth <= 0\n          || userScore === 10\n          || pcHealth <= 0\n          || pcScore === 10 ? (\n            <div>\n              <WinnerModal\n                pcScore={pcScore}\n                userScore={userScore}\n                setPcScore={setPcScore}\n                setUserScore={setUserScore}\n                result={setResult}\n                userChoice={setUserChoice}\n                pcChoice={setPcChoice}\n                userName={names[0]}\n                userHealth={setUserHealth}\n                pcHealth={setPcHealth}\n              />\n            </div>\n            ) : (\n              <div\n                className={hideGame ? 'game__content hidden' : 'game__content'}\n                style={{ display: loading ? 'block' : 'none' }}\n              >\n                <div className=\"logo\">\n                  <h1 className=\"game__heading\">\n                    rock paper scissor lizard spock\n                  </h1>\n                </div>\n                <div className=\"button__wrapper\">\n                  <button\n                    onClick={() => setSettings(!settings)}\n                    className=\"settings\"\n                  >\n                    <img src=\"settings.svg\" alt=\"settings button\" />\n                  </button>\n                  <div\n                    className={settings ? 'nav__buttons' : 'nav__buttons hidden'}\n                    onMouseLeave={() => setSettings(false)}\n                  >\n                    <button\n                      className=\"buttons buttons--rules\"\n                      onClick={() => {\n                        setRulesModal(true);\n                        closeSettings();\n                      }}\n                    >\n                      Rules\n                    </button>\n                    <button\n                      className=\"buttons buttons--level\"\n                      onClick={() => {\n                        setLevelModal(true);\n                        closeSettings();\n                      }}\n                    >\n                      Level\n                    </button>\n                    <button\n                      className=\"buttons buttons--rules\"\n                      onClick={() => {\n                        setStatsModal(true);\n                        closeSettings();\n                      }}\n                    >\n                      Stats\n                    </button>\n                    <button\n                      className=\"buttons buttons--reset\"\n                      onClick={() => resetGame()}\n                    >\n                      Reset\n                    </button>\n                  </div>\n                </div>\n                <h1 className=\"result\">{visible ? result : ''}</h1>\n\n                <div className=\"battle\">\n                  <div className=\"game__user\">\n                    <h1 className=\"game__user--title\">User</h1>\n                    <p className=\"game__user--name\">{`Name: ${names[0]}`}</p>\n                    <p className=\"game__user--choice\">{`Chose: ${userChoice}`}</p>\n                    <p className=\"game__user--score\">{`Score: ${userScore}`}</p>\n                    <p className=\"game__user--level\">{`Level: ${level}`}</p>\n                    <p className=\"game__user--health\">Health:</p>\n                    <ProgressBar\n                      completed={userHealth}\n                      bgColor=\"#7cdb8c\"\n                      labelAlignment=\"center\"\n                      baseBgColor=\"#fefefb\"\n                      maxCompleted={100}\n                    />\n                  </div>\n                  <div className=\"battle__block\">\n                    <div className=\"battle__character\">\n                      {choices\n                        .filter(({ name }) => name === userChoice)\n                        .map(({ imgSrc, id }) => (\n                          <img\n                            className=\"battle__character--image\"\n                            src={imgSrc}\n                            key={id}\n                            alt={imgSrc}\n                          />\n                        ))}\n                    </div>\n                    <span className=\"battle__vs\">VS</span>\n                    <div className=\"battle__character\">\n                      {choices\n                        .filter(({ name }) => name === pcChoice)\n                        .map(({ imgSrc }) => (\n                          <img\n                            className=\"battle__character--image\"\n                            key={imgSrc}\n                            src={visible ? imgSrc : '1.gif'}\n                            alt={imgSrc}\n                          />\n                        ))}\n                    </div>\n                  </div>\n                  <div className=\"game__pc\">\n                    <h1 className=\"game__pc--title\">PC</h1>\n                    <p className=\"game__pc--name\">{`Name: ${names[1]}`}</p>\n                    <p className=\"game__pc--choice\">\n                      {`Chose: ${visible ? pcChoice : '?'}`}\n                    </p>\n                    <p className=\"game__pc--score\">{`Score: ${pcScore}`}</p>\n                    <p className=\"game__pc--level\">{`Level: ${level}`}</p>\n                    <p className=\"game__pc--health\">Health:</p>\n                    <ProgressBar\n                      completed={pcHealth}\n                      bgColor=\"#7cdb8c\"\n                      labelAlignment=\"center\"\n                      baseBgColor=\"#fefefb\"\n                      maxCompleted={100}\n                    />\n                  </div>\n                </div>\n                <div className=\"buttons__wrapper\">\n                  {choices.map(({ name, imgSrc }) => (\n                    <div className=\"character__block\">\n                      <p className=\"character__name\">{name}</p>\n                      <button\n                        className=\"button__character\"\n                        disabled={!isButtonActive}\n                        onClick={() => handleClick(name)}\n                        key={name}\n                      >\n                        <img className=\"character__image\" src={imgSrc} alt=\"\" />\n                      </button>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n        </div>\n      )}\n      {rulesModal && (\n        <RulesModal closeModal={setRulesModal} hideGame={setHideGame} />\n      )}\n      {levelModal && (\n        <LevelModal\n          closeModal={setLevelModal}\n          hideGame={setHideGame}\n          level={setLevel}\n        />\n      )}\n      {statsModal && (\n        <StatsModal\n          stats={statistics}\n          closeModal={setStatsModal}\n          hideGame={setHideGame}\n        />\n      )}\n    </div>\n  );\n};\nexport default Game;\n","import './App.scss';\nimport Game from './components/Game/Game';\n\nconst App = () => (\n  <div className=\"App\">\n    <Game />\n  </div>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}